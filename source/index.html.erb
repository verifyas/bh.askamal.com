<% set_meta_tags title: data.site.name,
  full_title: false %>

<div class="flex-col w-full h-full justify-between bg-teal-300 flex overflow-x-hidden" style="background: linear-gradient(180deg, #3E40F8 0%, #3537F8 100%);">
  <div class="font-bold text-3xl text-white text-center mx-4 my-2">
    Still guessing where<br>
    itâ€™s all going?
  </div>
  <div id="el" class="flex flex-1 overflow-y-hidden justify-around relative items-center" style="transition-duration: .3s; transition-timing-function: ease-out;">
    <img src="/images/1.png" draggable="false" class="select-none pointer-events-none max-h-full" style="transition-duration: .3s; transition-timing-function: ease-out;">
    <img src="/images/2.png" draggable="false" class="select-none pointer-events-none max-h-full" style="transition-duration: .3s; transition-timing-function: ease-out;">
    <img src="/images/1.png" draggable="false" class="select-none pointer-events-none max-h-full" style="transition-duration: .3s; transition-timing-function: ease-out;">
  </div>
  <div class="text-2xl text-center text-white font-bold my-2">
    Amal magically breaks <br>
    down your spending
  </div>
  <div class="rounded-full bg-green-400 py-2 mx-8 mt-2 mb-4 font-bold text-green-700 text-xl text-center ">
    get early access
  </div>
</div>

<script>
  var initialX, offsetX, curScreen = 0;
  var screenWidth;
  const numScreens = 3, widthFactor = .65, heightFactor = .9;

  function loadScreen(nextScreen) {
    // Uses the globals numScreens, curScreen, offsetX, el
    curScreen = clamp(0, numScreens - 1)(nextScreen);
    updateOffset();
    updateHeights();
  }

  // DOM event handlers
  document.addEventListener('DOMContentLoaded', function(e) {
    // Register event handlers
    el.onpointerdown = downHandler;
    el.onpointercancel = upHandler;
    el.onpointerup = upHandler;

    updateScreenWidth();
    updateHeights();
  });

  function downHandler(ev) {
    initialX = ev.clientX;
    el.style.transitionDuration = '0s';
    el.onpointermove = moveHandler;
  }

  function moveHandler(ev) {
    var newOffset = offsetX + (ev.clientX - initialX);
    el.style.transform = `translateX(${newOffset}px)`;
  }

  function upHandler(ev) {
    var offset = ev.clientX - initialX;
    var nextScreen;

    el.style.transitionDuration = '0.3s';
    loadScreen(offset > 0 ? curScreen - 1 : curScreen + 1);

    // release move binding
    el.onpointermove = null;
  }

  window.addEventListener('resize', updateScreenWidth);

  function updateScreenWidth() {
    screenWidth = document.body.clientWidth;
    el.style.width = `${numScreens * screenWidth * widthFactor}px`;
    updateOffset();
  }

  function updateOffset() {
    // When widthFactor < 1, we need to add an offset to center
    // the image presently in focus
    var offsetFromEdge = screenWidth * (1 - widthFactor) / 2;

    // Update offset
    offsetX = -widthFactor * curScreen * screenWidth + offsetFromEdge;
    el.style.transform = `translateX(${offsetX}px)`;
  }

  function updateHeights() {
    document.querySelectorAll('#el > img').forEach(function(img, index) {
      var maxHeight = index == curScreen ? 100 : 100 * heightFactor;
      img.style.maxHeight = `${maxHeight}%`;
    });
  }

  // Utility functions
  const clamp = (min, max) => (value) =>
    value < min ? min : value > max ? max : value;
</script>