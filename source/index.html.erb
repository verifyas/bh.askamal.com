<% set_meta_tags title: data.site.name,
  full_title: false %>
<% set_meta_tags "theme-color": "#3E40F8" %>

<div class="animated-bg"></div>

<div class="flex-col w-full h-full justify-between bg-teal-300 flex overflow-x-hidden" style="background: linear-gradient(180deg, #3E40F8 0%, #3537F8 100%);">
  <div class="text-3xl text-white text-center mx-4 my-2" style="font-family: 'Montserrat', sans-serif; font-weight: 800; line-height: 1.05;">
    Still guessing where<br>
    itâ€™s all going?
  </div>
  <div id="el" class="flex flex-1 overflow-y-hidden justify-around relative items-center" >
    <img src="/images/1.svg" draggable="false" class="select-none pointer-events-none max-h-full">
    <img src="/images/2.png" draggable="false" class="select-none pointer-events-none max-h-full" >
    <img src="/images/1.svg" draggable="false" class="select-none pointer-events-none max-h-full" >
  </div>
  <div class="text-2xl text-center text-white font-bold my-2" style="font-family: 'Montserrat', sans-serif; font-weight: 800; line-height: 1.1; color: #ECEEF8;">
    Amal magically breaks <br>
    down your spending
  </div>
  <div class="rounded-full py-2 mx-8 mt-2 mb-4 text-xl text-center" style="font-family: 'Montserrat', sans-serif; font-weight: 800; color: #116F2E; background: #67D881;">
    get early access
  </div>
</div>

<div class="sheet absolute bottom-0 z-10 w-full">
  <div class="p-4 h-full flex flex-col justify-around">
    <div>
      <div class="text-lg pl-6 pr-6" style="color: #353550; font-family: Open Sans, Arial;">
        Let's get your details, shall we.
      </div>

      <input type="text" placeholder="Elon Misk" class="text w-full pl-6 pr-6 pt-3 pb-3 rounded-full text-lg mt-3">

      <input type="email" placeholder="elon@junaidperfumes.com" class="text w-full pl-6 pr-6 pt-3 pb-3 rounded-full text-lg mt-3">
    </div>

    <div>
      <div class="text text-lg pl-6 pr-6 mb-3" style="color: #353550; font-family: Open Sans, Arial;">
        Which banks do you use in Bahrain?
        (pick as many as you like)
      </div>

      <select id="bankSelect" multiple="" size="1">
        <option value="baraka">Al Baraka Islamic Bank</option>
        <option value="alsalam">Alsalam Bank</option>
        <option value="arab">Arab Bank</option>
        <option value="aub">AUB - Ahli United Bank</option>
        <option value="bbk">BBK - Bank of Bahrain and Kuwait</option>
        <option value="bdb">BDB - Bahrain Development Bank</option>
        <option value="bisb">BISB - Bahrain Islamic Bank</option>
        <option value="bnp">BNP Paribas</option>
        <option value="citi">Citibank</option>
        <option value="fab">FAB - First Abu Dhabi Bank</option>
        <option value="future">Future Bank</option>
        <option value="habib">Habib Bank</option>
        <option value="hsbc">HSBC Bank</option>
        <option value="icici">ICICI Bank</option>
        <option value="ila">ila Bank</option>
        <option value="ithmaar">Ithmaar Bank</option>
        <option value="kfh">KFH - Kuwait Finance House</option>
        <option value="mashreq">Mashreq Bank</option>
        <option value="meem">Meem</option>
        <option value="nbb">NBB</option>
        <option value="nbk">NBK - National Bank of Kuwait</option>
        <option value="sc">SC - Standard Chartered</option>
        <option value="ubl">UBL - United Bank Limited</option>
      </select>
    </div>

    <input type="button" class="w-full pl-6 pr-6 pt-3 pb-3 rounded-full text-xl" style="color: #EFEFF5; font-family: 'Montserrat', sans-serif; background: #3634E3; font-weight: 800;" value="request access">

    <div>
      <img src="/images/logo-gray.svg" title="Amal Logo" class="block m-auto">
      <div class="text-sm text-center mt-3" style="color: #B3B3CB;">
        Amal AI is an authorized participant in the Fintech Regulatory Sandbox in the Kingdom of Bahrain, operating as a Sandbox Ancillary Service Provider
      </div>
    </div>
  </div>
</div>

<script>
  var initialX, offsetX, curScreen = 0;
  var screenWidth;
  const numScreens = 3, widthFactor = .65, heightFactor = .9;

  function loadScreen(nextScreen) {
    // Uses the globals numScreens, curScreen, offsetX, el
    curScreen = clamp(0, numScreens - 1)(nextScreen);
    updateOffset();
    updateHeights();
  }

  // DOM event handlers
  document.addEventListener('DOMContentLoaded', function(e) {
    // Register event handlers
    el.onpointerdown = downHandler;
    el.onpointercancel = upHandler;
    el.onpointerup = upHandler;

    updateScreenWidth();
    updateHeights();
    createBgElements();

    window.setTimeout(() => document.querySelector('.sheet').classList.add('on'), 1000);
    new SlimSelect({
      select: '#bankSelect',
      placeholder: "Select your bank(s)"
    })
  });

  function downHandler(ev) {
    initialX = ev.clientX;
    el.style.transitionDuration = '0s';
    el.onpointermove = moveHandler;
  }

  function moveHandler(ev) {
    var newOffset = offsetX + (ev.clientX - initialX);
    el.style.transform = `translateX(${newOffset}px)`;
  }

  function upHandler(ev) {
    var offset = ev.clientX - initialX;
    var nextScreen;

    el.style.transitionDuration = '0.3s';
    loadScreen(offset > 0 ? curScreen - 1 : curScreen + 1);

    // release move binding
    el.onpointermove = null;
  }

  window.addEventListener('resize', updateScreenWidth);

  function updateScreenWidth() {
    screenWidth = document.body.clientWidth;
    el.style.width = `${numScreens * screenWidth * widthFactor}px`;
    updateOffset();
  }

  function updateOffset() {
    // When widthFactor < 1, we need to add an offset to center
    // the image presently in focus
    var offsetFromEdge = screenWidth * (1 - widthFactor) / 2;

    // Update offset
    offsetX = -widthFactor * curScreen * screenWidth + offsetFromEdge;
    el.style.transform = `translateX(${offsetX}px)`;
  }

  function updateHeights() {
    document.querySelectorAll('#el > img').forEach(function(img, index) {
      var scale = index == curScreen ? 1 : heightFactor;
      img.style.transform = `scale(${scale})`;
    });
  }

  // Background related
  const IMAGES = [
    [
      '/images/bg-hand.svg',
      '/images/bg-home.svg',
      '/images/bg-insurance.svg',
      '/images/bg-shopping.svg',
      '/images/bg-eat.svg',
    ],
    [
      '/images/bg-hsbc.svg',
      '/images/bg-bisb.svg',
      '/images/bg-kfh.svg',
    ],
    [
      ''
    ]
  ];

  function createBgElements() {
    window.setInterval(createSingleElement, 250);
  }

  function refreshElements() {
    const MAX_NUM_ELEMENTS = 10;
    var elems = document.querySelectorAll('.animated-bg > .single.on');
    if (elems.length < MAX_NUM_ELEMENTS) createSingleElement(); // per interval
  }

  function createSingleElement() {
    const imageSet = IMAGES[curScreen];
    const imageIndex = Math.floor(Math.random() * imageSet.length);

    const root = document.querySelector('.animated-bg');
    const elem = document.createElement('div');
    root.appendChild(elem);

    elem.classList.add('single');
    elem.addEventListener('transitionend', destroyElement);

    // pick a point along the circumference of the elem
    const elemWidth = root.clientWidth;
    const elemHeight = root.clientHeight;
    const circumference = 2 * (elemWidth + elemHeight); // in px
    const point = Math.round(Math.random() * circumference);
    
    // transform to that zpoint, and turn on the animation
    var coords = generateCoords(elemWidth, elemHeight);
    elem.style.left = coords[0] + 'px';
    elem.style.top = coords[1] + 'px';
    elem.style.transform = ` scale(${Math.round(Math.random() * 3)}) rotate(270deg)`;
    // elem.style.transform += ` translate(${result[0]}px, ${result[1]}px)`;

    elem.style.backgroundImage = `url(${imageSet[imageIndex]})`;
    elem.style.transitionDelay = 3 * Math.random() + 's';
    elem.classList.add('on');
  }

  function generateCoords(screenWidth, screenHeight) {
    const CLEARANCE = 200; // distance travelled beyond the edge

    // We want the points to travel along the left/right sides, avoiding
    // the text on the top/bottom of the page
    var x = Math.random() < 0.5 ? 0 - CLEARANCE : screenWidth + CLEARANCE;
    var y = Math.random() * screenHeight;
    
    return [x, y];
  }

  function destroyElement(event) {
    if(event.target.parentNode) {
      event.target.parentNode.removeChild(event.target);
    }
  }

  const clamp = (min, max) => (value) =>
    value < min ? min : value > max ? max : value;
</script>